#!/usr/bin/env bash -e

# Usage:
# Build the project in the local environment:  ./scripts/build
# Build the project inside a Docker container: ./scripts/build -s
# Build the project inside a Docker container: ./scripts/build --in-sandbox

APP_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )/"
source "$APP_HOME/scripts/.functions.sh"

# Folder where PCS sandboxes cache data. Reuse the same folder to speed up the
# sandbox and to save disk space.
# Use PCS_CACHE="$APP_HOME/.cache" to cache inside the project folder
PCS_CACHE="/tmp/azure/iotpcs/.cache"

sbt_build() {
    cd $APP_HOME

    check_dependency_java
    ./scripts/env-vars-check

    header "Running tests..."
    chmod +x sbt
    ./sbt test
}

setup_sandbox_cache() {
    mkdir -p $PCS_CACHE/sandbox/.ivy2
    mkdir -p $PCS_CACHE/sandbox/.sbt
    echo "Note: caching build files in $PCS_CACHE"
}

build_in_sandbox() {

    setup_sandbox_cache

    cd $APP_HOME

    # In Windows this script should use docker.exe, in which case
    # the parameters syntax is different, e.g. volumes path
    # (i.e. C:\path\path\... vs /c/path/path/...).
    #
    # Note that this script is also used for the git precommit hook.
    set +e
    IS_WINDOWS=$(which cmd.exe)
    set -e
    if [[ -z "$IS_WINDOWS" ]]; then
        check_dependency_docker
        ./scripts/env-vars-check

        docker run -it \
	        -e PCS_TELEMETRY_DOCUMENTDB_CONNSTRING \
            -e PCS_STORAGEADAPTER_WEBSERVICE_URL \
            -v "$PCS_CACHE/sandbox/.ivy2:/root/.ivy2" \
            -v "$PCS_CACHE/sandbox/.sbt:/root/.sbt" \
            -v "$APP_HOME:/opt/code" \
            azureiotpcs/code-builder-java:1.0 /opt/code/scripts/build
    else
        # Note 'winpty' is required to provide a TTY to Docker
        echo "Launching cmd.exe /c winpty ..."
        cmd.exe /c "winpty .\scripts\build.cmd --in-sandbox"
    fi
}

if [[ "$1" == "--in-sandbox" || "$1" == "-s" ]]; then
    build_in_sandbox
else
    sbt_build
fi

set +e
